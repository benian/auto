Risk Management in the Lifecycle  Ideally, risk management occurs  throughout the entire lifecycle.  In a mature organization, where project  teams are totally aware of the importance  of risk, risk management takes place at  many levels, and not just for testing.  Important risks are addressed in  earlier test levels. (For example,  if performance is identified as  a key quality risk area, not  only will performance testing  begin early in system test, but  performance tests will be run during  unit and integration testing.)  In addition, mature organizations  not only identify risks, but also  identify the sources of risk and  the consequence of those risks.  For those defects that  do occur, root cause  analysis is used to  understand sources of risk  more deeply and to implement  process improvements  that prevent defects  in the first place.  For example, in my company, we  noticed many performance defects  across different projects, so  we took an action and send a  couple of our testers to join  performance workshops to help  us do a better job in performance  testing in future projects.  If an organization has a test policy  document and/or test strategy  document, then these should describe  the general process by which  product and project risks are managed  in testing, and show how risk  management is integrated into and  affects all stages of testing.  Mitigation exists throughout the  software development lifecycle.  Risk analysis should be fully  informed, considering related  work activity, system behavior,  cost, end user, and liability.  Risk analysis transcends  testing, with the test team  participating in and influencing  a program-wide risk analysis.  It is also important to sequence and  prioritize the testing, so most  risk-based testing methods also include  techniques for using the level of  risk to achieve that, thus ensuring  early coverage of the most important  areas and discovery of the most important  defects during test execution.  In some cases, all of the  highest-risk tests are run before  any lower risk tests, and  tests are run in strict risk  order (often called "depth-first");  meaning finish a full  feature testing to the very  deep then go to the next one.  in other cases, a sampling approach  is used to select a sample  of tests across all the identified  risk items using risk to  weight the selection while at the  same time ensuring coverage of  every risk item at least once  (often called "breadth-first").  Meaning take a sample  of the test cases from  feature one then take  another sample of the  test cases from feature two and when done  take another round of test cases and so on.  We have seen questions in previous lectures  asking about test scheduling based  on risk analysis so expect more of such  questions in this siction as well.  Whether risk-based  testing proceeds  depth-first or breadth-first,  it is possible  that the time allocated for testing might  be consumed without all tests being run.  Risk-based testing allows testers to  report to management in terms of the  remaining level of risk at this point,  and allows management to decide  whether to extend testing or to  transfer the remaining risk onto the  users, customers, help desk/technical  support, and/or operational staff.  During test execution, risk-based testing  techniques allow project participants,  project and product managers, executives,  senior managers, and project  stakeholders, to monitor and control  the software development lifecycle,  including making release decisions,  based on the residual risk of risk.  Residual level of risk means the remaining  level of risk at any point of time.  This requires the Test Manager  to report test results in  terms of risk in a way each test  stakeholder can understand.  many performance defects  across different projects, so  we took an action and send  a couple of our testers to  join performance workshops  to help us do a better job  in performance testing. If  an organization has a test  policy document and/or test  strategy document, then these  should describe the general  process by which product and  project risks are managed  in testing, and show how risk  management is integrated  into and affects all stages of testing.  Mitigation exists  throughout the software  development lifecycle. Risk  analysis should be fully informed,  considering related work  activity, system behavior,  cost, end user, and liability.  Risk analysis transcends  testing, with the test team  participating in and influencing  a program-wide risk  analysis. It is also important  to sequence and prioritize  the testing, so most risk-based  testing methods also  include techniques for using  the level of risk to achieve  that, thus ensuring early  coverage of the most important  areas and discovery of the  most important defects during  test execution. In some cases,  all of the highest-risk  tests are run before any lower  risk tests, and tests are  run in strict risk order  (often called "depth-first");  meaning finish a full feature  testing to the very deep  then go to the next one.  in other cases, a sampling  approach is used to select a  sample of tests across all the  identified risk items using  risk to weight the selection  while at the same time ensuring  coverage of every risk  item at least once (often  called "breadth-first").  Meaning take a sample of the  test cases from feature one  then take another sample of  the test cases from feature  two and when done take another  round of test cases and  so on. We have seen questions  in previous lectures asking  about test scheduling based  on risk analysis so expect  more of such questions. Whether  risk-based testing proceeds  depth-first or breadth-first,  it is possible that the  time allocated for testing  might be consumed without all  tests being run. Risk-based  testing allows testers to  report to management in terms  of the remaining level of  risk at this point, and allows  management to decide whether  to extend testing or to  transfer the remaining risk  onto the users, customers,  help desk/technical support,  and/or operational staff.  During test execution,  risk-based testing techniques  allow project participants,  project and product managers,  executives, senior managers,  and project stakeholders,  to monitor and control the  software development lifecycle,  including making release  decisions, based on the  residual level of risk. This  requires the Test Manager to  report test results in terms  of risk in a way each test  stakeholder can understand.  