
00:00:05.201 --> 00:00:08.745
Risk Management in the Lifecycle

00:00:09.223 --> 00:00:14.224
Ideally, risk management occurs
throughout the entire lifecycle.

00:00:14.615 --> 00:00:19.717
In a mature organization, where project
teams are totally aware of the importance

00:00:19.729 --> 00:00:24.594
of risk, risk management takes place at
many levels, and not just for testing.

00:00:25.120 --> 00:00:29.696
Important risks are addressed in
earlier test levels. (For example,

00:00:29.708 --> 00:00:33.824
if performance is identified as
a key quality risk area, not

00:00:33.836 --> 00:00:37.981
only will performance testing
begin early in system test, but

00:00:37.993 --> 00:00:42.552
performance tests will be run during
unit and integration testing.)

00:00:43.105 --> 00:00:47.956
In addition, mature organizations
not only identify risks, but also

00:00:47.968 --> 00:00:52.545
identify the sources of risk and
the consequence of those risks.

00:00:53.129 --> 00:00:56.312
For those defects that
do occur, root cause

00:00:56.324 --> 00:00:59.737
analysis is used to
understand sources of risk

00:00:59.749 --> 00:01:03.335
more deeply and to implement
process improvements

00:01:03.347 --> 00:01:06.297
that prevent defects
in the first place.

00:01:06.597 --> 00:01:10.818
For example, in my company, we
noticed many performance defects

00:01:10.830 --> 00:01:14.732
across different projects, so
we took an action and send a

00:01:14.744 --> 00:01:18.674
couple of our testers to join
performance workshops to help

00:01:18.686 --> 00:01:22.759
us do a better job in performance
testing in future projects.

00:01:23.900 --> 00:01:28.649
If an organization has a test policy
document and/or test strategy

00:01:28.661 --> 00:01:33.351
document, then these should describe
the general process by which

00:01:33.363 --> 00:01:38.153
product and project risks are managed
in testing, and show how risk

00:01:38.165 --> 00:01:42.756
management is integrated into and
affects all stages of testing.

00:01:46.353 --> 00:01:50.002
Mitigation exists throughout the
software development lifecycle.

00:01:50.586 --> 00:01:54.961
Risk analysis should be fully
informed, considering related

00:01:54.973 --> 00:01:59.505
work activity, system behavior,
cost, end user, and liability.

00:01:59.894 --> 00:02:04.102
Risk analysis transcends
testing, with the test team

00:02:04.114 --> 00:02:09.050
participating in and influencing
a program-wide risk analysis.

00:02:10.404 --> 00:02:15.156
It is also important to sequence and
prioritize the testing, so most

00:02:15.168 --> 00:02:20.278
risk-based testing methods also include
techniques for using the level of

00:02:20.290 --> 00:02:25.290
risk to achieve that, thus ensuring
early coverage of the most important

00:02:25.302 --> 00:02:30.314
areas and discovery of the most important
defects during test execution.

00:02:30.586 --> 00:02:35.441
In some cases, all of the
highest-risk tests are run before

00:02:35.453 --> 00:02:39.914
any lower risk tests, and
tests are run in strict risk

00:02:39.926 --> 00:02:44.584
order (often called "depth-first");
meaning finish a full

00:02:44.596 --> 00:02:49.266
feature testing to the very
deep then go to the next one.

00:02:49.453 --> 00:02:54.151
in other cases, a sampling approach
is used to select a sample

00:02:54.163 --> 00:02:58.649
of tests across all the identified
risk items using risk to

00:02:58.661 --> 00:03:03.477
weight the selection while at the
same time ensuring coverage of

00:03:03.489 --> 00:03:08.094
every risk item at least once
(often called "breadth-first").

00:03:08.460 --> 00:03:11.328
Meaning take a sample
of the test cases from

00:03:11.340 --> 00:03:14.155
feature one then take
another sample of the

00:03:14.167 --> 00:03:19.618
test cases from feature two and when done
take another round of test cases and so on.

00:03:21.551 --> 00:03:26.265
We have seen questions in previous lectures
asking about test scheduling based

00:03:26.277 --> 00:03:30.703
on risk analysis so expect more of such
questions in this siction as well.

00:03:32.144 --> 00:03:34.534
Whether risk-based
testing proceeds

00:03:34.546 --> 00:03:37.549
depth-first or breadth-first,
it is possible

00:03:37.561 --> 00:03:43.044
that the time allocated for testing might
be consumed without all tests being run.

00:03:44.691 --> 00:03:49.405
Risk-based testing allows testers to
report to management in terms of the

00:03:49.417 --> 00:03:53.951
remaining level of risk at this point,
and allows management to decide

00:03:53.963 --> 00:03:58.332
whether to extend testing or to
transfer the remaining risk onto the

00:03:58.344 --> 00:04:02.979
users, customers, help desk/technical
support, and/or operational staff.

00:04:04.395 --> 00:04:09.700
During test execution, risk-based testing
techniques allow project participants,

00:04:09.712 --> 00:04:14.373
project and product managers, executives,
senior managers, and project

00:04:14.385 --> 00:04:19.138
stakeholders, to monitor and control
the software development lifecycle,

00:04:19.150 --> 00:04:23.850
including making release decisions,
based on the residual risk of risk.

00:04:24.568 --> 00:04:29.966
Residual level of risk means the remaining
level of risk at any point of time.

00:04:30.519 --> 00:04:34.387
This requires the Test Manager
to report test results in

00:04:34.399 --> 00:04:38.483
terms of risk in a way each test
stakeholder can understand.

00:04:33.119 --> 00:04:35.252


00:04:36.252 --> 00:04:38.319


00:04:39.319 --> 00:04:40.786


00:04:41.786 --> 00:04:43.719


00:04:44.719 --> 00:04:46.652


00:04:47.652 --> 00:04:49.385


00:04:50.385 --> 00:04:52.385


00:04:53.385 --> 00:04:56.052


00:04:57.052 --> 00:04:58.052


00:04:59.052 --> 00:05:00.719


00:05:01.718 --> 00:05:03.318
many performance defects

00:05:04.318 --> 00:05:06.252
across different projects, so

00:05:07.252 --> 00:05:08.985
we took an action and send

00:05:09.985 --> 00:05:11.718
a couple of our testers to

00:05:12.718 --> 00:05:14.452
join performance workshops

00:05:15.452 --> 00:05:17.185
to help us do a better job

00:05:18.185 --> 00:05:19.918
in performance testing. If

00:05:20.918 --> 00:05:22.652
an organization has a test

00:05:23.652 --> 00:05:25.452
policy document and/or test

00:05:26.452 --> 00:05:28.385
strategy document, then these

00:05:29.385 --> 00:05:31.185
should describe the general

00:05:32.185 --> 00:05:34.052
process by which product and

00:05:35.052 --> 00:05:36.718
project risks are managed

00:05:37.718 --> 00:05:39.652
in testing, and show how risk

00:05:40.652 --> 00:05:42.252
management is integrated

00:05:43.252 --> 00:05:45.852
into and affects all stages of testing.

00:05:46.852 --> 00:05:47.985
Mitigation exists

00:05:48.985 --> 00:05:50.518
throughout the software

00:05:51.518 --> 00:05:53.318
development lifecycle. Risk

00:05:54.318 --> 00:05:56.585
analysis should be fully informed,

00:05:57.585 --> 00:05:59.185
considering related work

00:06:00.185 --> 00:06:01.918
activity, system behavior,

00:06:02.918 --> 00:06:04.918
cost, end user, and liability.

00:06:05.918 --> 00:06:07.518
Risk analysis transcends

00:06:08.518 --> 00:06:10.318
testing, with the test team

00:06:11.318 --> 00:06:13.452
participating in and influencing

00:06:14.452 --> 00:06:15.718
a program-wide risk

00:06:16.718 --> 00:06:18.718
analysis. It is also important

00:06:19.718 --> 00:06:21.452
to sequence and prioritize

00:06:22.452 --> 00:06:24.518
the testing, so most risk-based

00:06:25.518 --> 00:06:26.852
testing methods also

00:06:27.852 --> 00:06:29.718
include techniques for using

00:06:30.718 --> 00:06:32.585
the level of risk to achieve

00:06:33.585 --> 00:06:35.252
that, thus ensuring early

00:06:36.252 --> 00:06:38.252
coverage of the most important

00:06:39.252 --> 00:06:40.985
areas and discovery of the

00:06:41.985 --> 00:06:43.918
most important defects during

00:06:44.918 --> 00:06:46.918
test execution. In some cases,

00:06:47.918 --> 00:06:49.452
all of the highest-risk

00:06:50.452 --> 00:06:52.452
tests are run before any lower

00:06:53.452 --> 00:06:55.118
risk tests, and tests are

00:06:56.118 --> 00:06:57.718
run in strict risk order

00:06:58.718 --> 00:07:00.652
(often called "depth-first");

00:07:01.652 --> 00:07:03.585
meaning finish a full feature

00:07:04.585 --> 00:07:06.185
testing to the very deep

00:07:07.185 --> 00:07:08.785
then go to the next one.

00:07:09.785 --> 00:07:11.518
in other cases, a sampling

00:07:12.518 --> 00:07:14.385
approach is used to select a

00:07:15.385 --> 00:07:17.385
sample of tests across all the

00:07:18.385 --> 00:07:20.185
identified risk items using

00:07:21.185 --> 00:07:23.052
risk to weight the selection

00:07:24.052 --> 00:07:26.118
while at the same time ensuring

00:07:27.118 --> 00:07:28.585
coverage of every risk

00:07:29.585 --> 00:07:31.252
item at least once (often

00:07:32.252 --> 00:07:33.852
called "breadth-first").

00:07:34.852 --> 00:07:36.718
Meaning take a sample of the

00:07:37.718 --> 00:07:39.518
test cases from feature one

00:07:40.518 --> 00:07:42.318
then take another sample of

00:07:43.318 --> 00:07:45.118
the test cases from feature

00:07:46.118 --> 00:07:48.118
two and when done take another

00:07:49.118 --> 00:07:50.652
round of test cases and

00:07:51.652 --> 00:07:53.585
so on. We have seen questions

00:07:54.585 --> 00:07:56.385
in previous lectures asking

00:07:57.385 --> 00:07:59.185
about test scheduling based

00:08:00.185 --> 00:08:01.918
on risk analysis so expect

00:08:02.918 --> 00:08:04.985
more of such questions. Whether

00:08:05.985 --> 00:08:07.785
risk-based testing proceeds

00:08:08.785 --> 00:08:10.718
depth-first or breadth-first,

00:08:11.718 --> 00:08:13.252
it is possible that the

00:08:14.252 --> 00:08:15.985
time allocated for testing

00:08:16.985 --> 00:08:18.918
might be consumed without all

00:08:19.918 --> 00:08:21.718
tests being run. Risk-based

00:08:22.718 --> 00:08:24.385
testing allows testers to

00:08:25.385 --> 00:08:27.318
report to management in terms

00:08:28.318 --> 00:08:29.985
of the remaining level of

00:08:30.985 --> 00:08:32.985
risk at this point, and allows

00:08:33.985 --> 00:08:35.852
management to decide whether

00:08:36.852 --> 00:08:38.385
to extend testing or to

00:08:39.385 --> 00:08:41.185
transfer the remaining risk

00:08:42.185 --> 00:08:43.918
onto the users, customers,

00:08:44.918 --> 00:08:46.785
help desk/technical support,

00:08:47.785 --> 00:08:49.452
and/or operational staff.

00:08:50.452 --> 00:08:51.918
During test execution,

00:08:52.918 --> 00:08:54.852
risk-based testing techniques

00:08:55.852 --> 00:08:57.652
allow project participants,

00:08:58.652 --> 00:09:00.585
project and product managers,

00:09:01.585 --> 00:09:03.452
executives, senior managers,

00:09:04.452 --> 00:09:06.118
and project stakeholders,

00:09:07.118 --> 00:09:08.852
to monitor and control the

00:09:09.852 --> 00:09:11.918
software development lifecycle,

00:09:12.918 --> 00:09:14.518
including making release

00:09:15.518 --> 00:09:17.052
decisions, based on the

00:09:18.052 --> 00:09:19.918
residual level of risk. This

00:09:20.918 --> 00:09:22.785
requires the Test Manager to

00:09:23.785 --> 00:09:25.652
report test results in terms

00:09:26.652 --> 00:09:28.385
of risk in a way each test

00:09:29.385 --> 00:09:31.185
stakeholder can understand.